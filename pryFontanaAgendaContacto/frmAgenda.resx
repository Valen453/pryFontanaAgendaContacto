<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>